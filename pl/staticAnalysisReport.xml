<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.67"/>
    <errors>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;cnt.num&apos; to itself." verbose="Redundant assignment of &apos;cnt.num&apos; to itself.">
            <location file="libft/includes/ft_counteradd.c" line="27"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;cnt.num&apos; to itself." verbose="Redundant assignment of &apos;cnt.num&apos; to itself.">
            <location file="libft/includes/ft_counterdiv.c" line="20"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;cnt1.num&apos; to itself." verbose="Redundant assignment of &apos;cnt1.num&apos; to itself.">
            <location file="libft/includes/ft_countereq.c" line="20"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;cnt.num&apos; to itself." verbose="Redundant assignment of &apos;cnt.num&apos; to itself.">
            <location file="libft/includes/ft_countermodul.c" line="20"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;cnt.num&apos; to itself." verbose="Redundant assignment of &apos;cnt.num&apos; to itself.">
            <location file="libft/includes/ft_countermul.c" line="20"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;cnt.num&apos; to itself." verbose="Redundant assignment of &apos;cnt.num&apos; to itself.">
            <location file="libft/includes/ft_counterpow.c" line="20"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;cnt.num&apos; to itself." verbose="Redundant assignment of &apos;cnt.num&apos; to itself.">
            <location file="libft/includes/ft_counterset.c" line="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp&apos; can be reduced." verbose="The scope of the variable &apos;tmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="libft/includes/ft_lstdelone.c" line="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new&apos; can be reduced." verbose="The scope of the variable &apos;new&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="libft/includes/ft_lstmap.c" line="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="libft/includes/ft_putstr.c" line="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="libft/includes/ft_strclr.c" line="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;count&apos; can be reduced." verbose="The scope of the variable &apos;count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="libft/includes/ft_striteri.c" line="17"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="libft/includes/ft_strlcat.c" line="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="libft/includes/ft_strmap.c" line="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="libft/includes/ft_strmapi.c" line="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="libft/includes/ft_strncmp.c" line="17"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="libft/includes/ft_strncpy.c" line="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="libft/includes/ft_strnequ.c" line="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="libft/includes/ft_strnew.c" line="19"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="libft/includes/ft_strnstr.c" line="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ent&apos; can be reduced." verbose="The scope of the variable &apos;ent&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/main.c" line="60"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp2&apos; can be reduced." verbose="The scope of the variable &apos;tmp2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/main.c" line="140"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;comp_alpha&apos; is never used." verbose="The function &apos;comp_alpha&apos; is never used.">
            <location file="src/sort.c" line="24"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_counterfree&apos; is never used." verbose="The function &apos;ft_counterfree&apos; is never used.">
            <location file="libft/includes/ft_counterfree.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_countermod&apos; is never used." verbose="The function &apos;ft_countermod&apos; is never used.">
            <location file="libft/includes/ft_countermod.c" line="65"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_counterrecap&apos; is never used." verbose="The function &apos;ft_counterrecap&apos; is never used.">
            <location file="libft/includes/ft_counterrecap.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_countertab&apos; is never used." verbose="The function &apos;ft_countertab&apos; is never used.">
            <location file="libft/includes/ft_countertab.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_incdecvar&apos; is never used." verbose="The function &apos;ft_incdecvar&apos; is never used.">
            <location file="libft/includes/ft_incdecvar.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_incfourvar&apos; is never used." verbose="The function &apos;ft_incfourvar&apos; is never used.">
            <location file="libft/includes/ft_incfourvar.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_incthreevar&apos; is never used." verbose="The function &apos;ft_incthreevar&apos; is never used.">
            <location file="libft/includes/ft_incthreevar.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_initfourvar&apos; is never used." verbose="The function &apos;ft_initfourvar&apos; is never used.">
            <location file="libft/includes/ft_initfourvar.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_isascii&apos; is never used." verbose="The function &apos;ft_isascii&apos; is never used.">
            <location file="libft/includes/ft_isascii.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_issymbol&apos; is never used." verbose="The function &apos;ft_issymbol&apos; is never used.">
            <location file="src/sort.c" line="16"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_itoa&apos; is never used." verbose="The function &apos;ft_itoa&apos; is never used.">
            <location file="libft/includes/ft_itoa.c" line="33"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_lstadd&apos; is never used." verbose="The function &apos;ft_lstadd&apos; is never used.">
            <location file="libft/includes/ft_lstadd.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_lstdel&apos; is never used." verbose="The function &apos;ft_lstdel&apos; is never used.">
            <location file="libft/includes/ft_lstdel.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_lstiter&apos; is never used." verbose="The function &apos;ft_lstiter&apos; is never used.">
            <location file="libft/includes/ft_lstiter.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_lstmap&apos; is never used." verbose="The function &apos;ft_lstmap&apos; is never used.">
            <location file="libft/includes/ft_lstmap.c" line="28"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_memccpy&apos; is never used." verbose="The function &apos;ft_memccpy&apos; is never used.">
            <location file="libft/includes/ft_memccpy.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_memchr&apos; is never used." verbose="The function &apos;ft_memchr&apos; is never used.">
            <location file="libft/includes/ft_memchr.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_memcmp&apos; is never used." verbose="The function &apos;ft_memcmp&apos; is never used.">
            <location file="libft/includes/ft_memcmp.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_memdel&apos; is never used." verbose="The function &apos;ft_memdel&apos; is never used.">
            <location file="libft/includes/ft_memdel.c" line="16"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_memmove&apos; is never used." verbose="The function &apos;ft_memmove&apos; is never used.">
            <location file="libft/includes/ft_memmove.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_putendl_fd&apos; is never used." verbose="The function &apos;ft_putendl_fd&apos; is never used.">
            <location file="libft/includes/ft_putendl_fd.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_putnbrnl&apos; is never used." verbose="The function &apos;ft_putnbrnl&apos; is never used.">
            <location file="libft/includes/ft_putnbrnl.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_square&apos; is never used." verbose="The function &apos;ft_square&apos; is never used.">
            <location file="libft/includes/ft_square.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_strchr&apos; is never used." verbose="The function &apos;ft_strchr&apos; is never used.">
            <location file="libft/includes/ft_strchr.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_strclr&apos; is never used." verbose="The function &apos;ft_strclr&apos; is never used.">
            <location file="libft/includes/ft_strclr.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_strdel&apos; is never used." verbose="The function &apos;ft_strdel&apos; is never used.">
            <location file="libft/includes/ft_strdel.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_strequ&apos; is never used." verbose="The function &apos;ft_strequ&apos; is never used.">
            <location file="libft/includes/ft_strequ.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_striter&apos; is never used." verbose="The function &apos;ft_striter&apos; is never used.">
            <location file="libft/includes/ft_striter.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_striteri&apos; is never used." verbose="The function &apos;ft_striteri&apos; is never used.">
            <location file="libft/includes/ft_striteri.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_strjoin&apos; is never used." verbose="The function &apos;ft_strjoin&apos; is never used.">
            <location file="libft/includes/ft_strjoin.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_strlcat&apos; is never used." verbose="The function &apos;ft_strlcat&apos; is never used.">
            <location file="libft/includes/ft_strlcat.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_strmap&apos; is never used." verbose="The function &apos;ft_strmap&apos; is never used.">
            <location file="libft/includes/ft_strmap.c" line="16"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_strmapi&apos; is never used." verbose="The function &apos;ft_strmapi&apos; is never used.">
            <location file="libft/includes/ft_strmapi.c" line="16"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_strncat&apos; is never used." verbose="The function &apos;ft_strncat&apos; is never used.">
            <location file="libft/includes/ft_strncat.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_strnequ&apos; is never used." verbose="The function &apos;ft_strnequ&apos; is never used.">
            <location file="libft/includes/ft_strnequ.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_strnstr&apos; is never used." verbose="The function &apos;ft_strnstr&apos; is never used.">
            <location file="libft/includes/ft_strnstr.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_strrchr&apos; is never used." verbose="The function &apos;ft_strrchr&apos; is never used.">
            <location file="libft/includes/ft_strrchr.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_strsplit&apos; is never used." verbose="The function &apos;ft_strsplit&apos; is never used.">
            <location file="libft/includes/ft_strsplit.c" line="75"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_strstr&apos; is never used." verbose="The function &apos;ft_strstr&apos; is never used.">
            <location file="libft/includes/ft_strstr.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_strtrim&apos; is never used." verbose="The function &apos;ft_strtrim&apos; is never used.">
            <location file="libft/includes/ft_strtrim.c" line="34"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_strtrimchar&apos; is never used." verbose="The function &apos;ft_strtrimchar&apos; is never used.">
            <location file="libft/includes/ft_strtrimchar.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_tolower&apos; is never used." verbose="The function &apos;ft_tolower&apos; is never used.">
            <location file="libft/includes/ft_tolower.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ft_toupper&apos; is never used." verbose="The function &apos;ft_toupper&apos; is never used.">
            <location file="libft/includes/ft_toupper.c" line="15"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;p_elem&apos; is never used." verbose="The function &apos;p_elem&apos; is never used.">
            <location file="src/parser.c" line="37"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;print_file&apos; is never used." verbose="The function &apos;print_file&apos; is never used.">
            <location file="src/main.c" line="180"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;print_folder&apos; is never used." verbose="The function &apos;print_folder&apos; is never used.">
            <location file="src/main.c" line="174"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;push_content&apos; is never used." verbose="The function &apos;push_content&apos; is never used.">
            <location file="src/main.c" line="21"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sort_first&apos; is never used." verbose="The function &apos;sort_first&apos; is never used.">
            <location file="src/parser.c" line="75"/>
        </error>
    </errors>
</results>
